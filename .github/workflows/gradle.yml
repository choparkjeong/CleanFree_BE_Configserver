name: Cleanfree config server CI with gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.CLEANFREE_AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.CLEANFREE_ECR_REPOSITORY }}
  IMAGE_TAG: config-server-latest

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.cloud.config.server.git.username: ${{ secrets.GIT_USERNAME }}
          spring.cloud.config.server.git.password: ${{ secrets.GIT_PASSWORD }}
          encrypt.key: ${{ secrets.CLEANFREE_ENCRYPT_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker buildx build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .

      - name: Push Docker image to Amazon ECR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: cleanfree-runner

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull image from Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Check if container is running
        id: check-container
        run: |
          if sudo docker ps -a | grep -q cleanfree-config-server; then
            echo "config-server-running=true" >> $GITHUB_OUTPUT
          else
            echo "config-server-running=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop & remove docker container
        if: steps.check-container.outputs.config-server-running == 'true'
        run: |
          sudo docker stop cleanfree-config-server
          sudo docker rm cleanfree-config-server

      - name: Docker run new container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: sudo docker run -d --name cleanfree-config-server -p 8071:8071 --net cleanfree-network $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Delete old docker image
        run: sudo docker system prune -f
